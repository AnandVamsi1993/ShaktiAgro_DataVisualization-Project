from flask import *
import numpy as np                     
import pandas as pd
import base64
import io
import cv2
from io import BytesIO
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
pd.set_option('mode.chained_assignment', None)      # To suppress pandas warnings.
pd.set_option('display.max_colwidth', None)         # To display all the data in each column
pd.options.display.max_columns = 50                 # To display every column of the dataset in head()
import datetime
import matplotlib
from matplotlib import pyplot as plt
matplotlib.use('Agg')
import warnings
warnings.filterwarnings('ignore')
import seaborn as sns
import os

app = Flask(__name__)

picfolder = os.path.join('static', 'images')
app.config['UPLOAD_FOLDER'] = picfolder


@app.route('/')
def index():
    pic1 = os.path.join(app.config['UPLOAD_FOLDER'], 'collage.jpg')
    return render_template('home.html', user_image = pic1)

#picfolder1 = os.path.join('static', 'about')
#app.config['UPLOAD_FOLDER'] = picfolder1

@app.route('/about')
def func():
    imagelist=os.listdir('static/about')
    imagelist=['about/'+image for image in imagelist]
    return render_template('about.html', imagelist=imagelist)

@app.route('/revenuemargin')
def func2():
    df=pd.read_excel(r'C:\Users\chetali.a\Desktop\python\database\final_customer_sheet.xlsx')
    df['Date'] = pd.to_datetime(df['Date'])
    df['Quarter']=df['Date'].dt.quarter
    df['Month']=df['Date'].dt.month
    df['Fiscal_Quarter'] = df["Quarter"].replace({3.0:'Q2FY19-20', 4.0:'Q3FY19-20', 2.0:'Q1FY19-20', 1.0:'Q4FY19-20'})
    df = df.drop('Quarter', axis = 1)
    df["Month"].replace({1.0:'10-Jan 2020',2.0:'11-Feb 2020',3.0:'12-March 2020',4.0:'01-April 2019',5.0:'02-May 2019',6.0:"03-June 2019",7.0:'04-July 2019',8.0:'05-Aug 2019',9.0:'06-Sept 2019',10.0:'07-Oct 2019',11.0:'08-Nov 2019',12.0:'09-Dec 2019'},inplace=True)
    
    plt.figure(figsize=(20, 7))
    df.groupby('Fiscal_Quarter')['Amount '].sum().plot(kind="bar",color="Green")
    plt.ylabel('Revenue Analysis per quarter')
    plt.title('Fig 1.0-QUARTERLY REVENUE GENERATED IN 2019-20(in INR cr )')
    save_results_to = 'C:/Users/chetali.a/Desktop/flask/static/revenue/'
    plt.savefig(save_results_to + '01.png', dpi = 300)
    plt.close()


    plt.figure(figsize=(20, 7))
    df.groupby('Month')['Amount '].sum().plot(kind="bar",color="Red")
    plt.ylabel('Revenue Analysis per month')
    plt.title('Fig 2.0-MONTHLY REVENUE IN 2019-20(in INR cr)')
    plt.savefig(save_results_to + '02.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    var=df.groupby('Fiscal_Quarter')['Amount '].count()
    var.plot(kind="barh",color="Red")
    for index, value in enumerate(var):
        plt.text(value, index, str(value))
    plt.ylabel('No. of Transactions per Quarter')
    plt.title('Fig 3.0-QUARTERLY NO. OF TRANSACTIONS IN 2019-20')
    plt.savefig(save_results_to + '03.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    var=df.groupby('Month')['Amount '].count()
    var.plot(kind="barh",color="Red")
    for index, value in enumerate(var):
        plt.text(value, index, str(value))
    plt.ylabel('No. of Transactions per Month')
    plt.title('Fig 4.0-MONTHLY NO. OF TRANSACTIONS IN 2019-20')
    plt.savefig(save_results_to + '04.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.boxplot(data=df, x='Month', y='Qty ( in MT)', palette='viridis', width=0.8,order= np.sort(df['Month'].unique()))
    plt.xticks(rotation=90)
    plt.ylabel('Qty sold per Quarter')
    plt.title('Fig 5.0-MONTHLY QUANTITY SOLD IN 2019-20(in MT)')
    plt.savefig(save_results_to + '05.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    df.groupby('Fiscal_Quarter')['MARGIN'].sum().plot(kind="bar",color="Green")
    plt.axhline(y=0)
    plt.axvline(x=4)
    plt.ylabel('Quarterly Margins')
    plt.title('Fig 6.0-QUARTERLY MARGINS IN 2019-20(in INR 10s lk)')
    save_results_to = 'C:/Users/chetali.a/Desktop/flask/static/'
    plt.savefig(save_results_to + 'revenue06.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    df.groupby('Month')['MARGIN'].sum().plot(kind="bar",color="Green")
    plt.axhline(y=0)
    plt.axvline(x=12)
    plt.ylabel('Monthly Margins')
    plt.title('Fig 7.0-MONTHLY MARGINS IN 2019-20(in INR 10s lk)')
    plt.savefig(save_results_to + 'revenue07.png', dpi = 300)
    plt.close()



    image_names = os.listdir('static/revenue')
    image_names=['revenue/'+image for image in image_names]
    image_names=image_names[0:5]
    return render_template('revenuemargin.html' ,image_names= image_names)

@app.route('/product')
def funp():
      df=pd.read_excel(r'C:\Users\chetali.a\Desktop\python\database\final_customer_sheet.xlsx')
      df['Date'] = pd.to_datetime(df['Date'])
      df['Quarter']=df['Date'].dt.quarter
      df['Month']=df['Date'].dt.month
      df['Fiscal_Quarter'] = df["Quarter"].replace({3.0:'Q2FY19-20', 4.0:'Q3FY19-20', 2.0:'Q1FY19-20', 1.0:'Q4FY19-20'})
      df = df.drop('Quarter', axis = 1)
      df["Month"].replace({1.0:'10-Jan 2020',2.0:'11-Feb 2020',3.0:'12-March 2020',4.0:'01-April 2019',5.0:'02-May 2019',6.0:"03-June 2019",7.0:'04-July 2019',8.0:'05-Aug 2019',9.0:'06-Sept 2019',10.0:'07-Oct 2019',11.0:'08-Nov 2019',12.0:'09-Dec 2019'},inplace=True)
      df["Product "].replace({'Ms Scrap':'MS SCRAP','MS Flats':'MS FLATS','MS Bar':'MS BAR','Wire-7217':'WIRE-7217','MS Section':'MS SECTION','TILLER SHOVEL':'TILLER SHOVEL-8432','Milscale':'MILSCALE','MS Billets':'MS BILLETS','Ms Scrap-MELTING':'MS SCRAP MELTING','Ms Billets':'MS BILLETS', 'MS Scrap':'MS SCRAP','WIRE- 7217':'WIRE-7217'},inplace=True)
       
      variable6=df.groupby(['Fiscal_Quarter','Product '])['Amount ',"Product "].sum()
      variable7 = variable6['Amount '].groupby(level=0,group_keys=False)
      variable8 = variable7.apply(lambda x: x.sort_values(ascending=False).head(4))
      grouped_dataset2=pd.DataFrame(variable8)
      grouped_dataset2.reset_index(inplace=True)
      save_results_to = 'C:/Users/chetali.a/Desktop/flask/static/pr/'
      plt.figure(figsize=(16, 7))
      g = sns.barplot(data=grouped_dataset2, x="Fiscal_Quarter", y="Amount ", hue="Product ").set_title("Top 2 products with Highest Revenue in 2019-20")
      df.groupby('Fiscal_Quarter')['TOTAL FIXED COST','TOTAL VARIABLE COST'].sum().plot(kind="barh")
      plt.ylabel('Quarterly total fixed cost and total variable cost')
      plt.savefig(save_results_to + '01.png', dpi = 300)
      plt.close()
      variable6=df.groupby(['Fiscal_Quarter','Product '])['Amount ',"Product "].count()
      variable7 = variable6['Amount '].groupby(level=0,group_keys=False)
      variable8 = variable7.apply(lambda x: x.sort_values(ascending=False).head(4))
      grouped_dataset2=pd.DataFrame(variable8)
      grouped_dataset2.reset_index(inplace=True)
      plt.figure(figsize=(16, 7))
      g = sns.barplot(data=grouped_dataset2, x="Fiscal_Quarter", y="Amount ", hue="Product ").set_title("Top 4 products with Highest Number of Transactions in 2019-20")
      plt.savefig(save_results_to + '02.png', dpi = 300)
      plt.close()
      plt.figure(figsize=(16, 7))
      df['Product '].value_counts().plot(kind='pie', fontsize=14, autopct='%0.1f%%', 
                                               figsize=(20,20), shadow=True, startangle=0, legend=True)

      plt.ylabel('Market Share of each product')
      plt.savefig(save_results_to + '03.png', dpi = 300)
      plt.close()
      variable6=df.groupby(['Fiscal_Quarter','Product '])['Amount ',"Product "].count()
      variable7 = variable6['Amount '].groupby(level=0,group_keys=False)
      variable8 = variable7.apply(lambda x: x.sort_values(ascending=False).head(4))
      grouped_dataset2=pd.DataFrame(variable8)
      grouped_dataset2.reset_index(inplace=True)
      plt.figure(figsize=(16, 7))
      g = sns.barplot(data=grouped_dataset2, x="Fiscal_Quarter", y="Amount ", hue="Product ").set_title("Top 4 products with Highest Number of Transactions in 2019-20")
      plt.savefig(save_results_to + '04.png', dpi = 300)
      plt.close()
      image_names = os.listdir('static/pr')
      image_names=['pr/'+image for image in image_names]
      image_names=image_names[0:4]


      return render_template ('pr.html', image_names = image_names)

@app.route('/transactioncost')
def func3():
    df=pd.read_excel(r'C:\Users\chetali.a\Desktop\python\database\final_customer_sheet.xlsx')
    df['Date'] = pd.to_datetime(df['Date'])
    df['Quarter']=df['Date'].dt.quarter
    df['Month']=df['Date'].dt.month
    df['Fiscal_Quarter'] = df["Quarter"].replace({3.0:'Q2FY19-20', 4.0:'Q3FY19-20', 2.0:'Q1FY19-20', 1.0:'Q4FY19-20'})
    df = df.drop('Quarter', axis = 1)
    df["Month"].replace({1.0:'10-Jan 2020',2.0:'11-Feb 2020',3.0:'12-March 2020',4.0:'01-April 2019',5.0:'02-May 2019',6.0:"03-June 2019",7.0:'04-July 2019',8.0:'05-Aug 2019',9.0:'06-Sept 2019',10.0:'07-Oct 2019',11.0:'08-Nov 2019',12.0:'09-Dec 2019'},inplace=True)
    df["Product "].replace({'Ms Scrap':'MS SCRAP','MS Flats':'MS FLATS','MS Bar':'MS BAR','Wire-7217':'WIRE-7217','MS Section':'MS SECTION','TILLER SHOVEL':'TILLER SHOVEL-8432','Milscale':'MILSCALE','MS Billets':'MS BILLETS','Ms Scrap-MELTING':'MS SCRAP MELTING','Ms Billets':'MS BILLETS', 'MS Scrap':'MS SCRAP','WIRE- 7217':'WIRE-7217'},inplace=True)
    
    fig = plt.figure(figsize=(10,4))
    df.groupby('Fiscal_Quarter')['TOTAL FIXED COST','TOTAL VARIABLE COST'].sum().plot(kind="barh")
    plt.ylabel('Quarterly total fixed cost and total variable cost')
    plt.title('Fig 3.0-QUARTERLY TOTAL FIXED COST AND TOTAL VARIABLE COST IN 2019-20(in INR cr)')
    save_results_to = 'C:/Users/chetali.a/Desktop/flask/static/transactioncost/'
    plt.savefig(save_results_to + '03.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    df.groupby('Month')['TOTAL FIXED COST'].sum().plot(kind="bar",color="red")
    plt.ylabel('Monthly total fixed cost')
    plt.title('Fig 1.0-MONTHLY TOTAL FIXED COST IN 2019-20(in INR cr)')
    plt.savefig(save_results_to + '01.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    df.groupby('Month')['TOTAL VARIABLE COST'].sum().plot(kind="bar",color="green")
    plt.ylabel('Monthly total variable cost')
    plt.title('Fig 2.0-MONTHLY TOTAL VARIABLE COST IN 2019-20(in INR 10s lk)')
    plt.savefig(save_results_to + '02.png', dpi = 300)
    plt.close()
    b2=df.groupby(['Fiscal_Quarter'])['COAL','SCRAP GENERATED PRODUCTION COST','BURNING LOSS','WATER','SALARY & LABOUR CHARGES','LOADING UNLOADING','LPG','OXYGEN'].sum()
    plt.figure(figsize=(10,4))
    b2.groupby('Fiscal_Quarter')['SALARY & LABOUR CHARGES','BURNING LOSS','COAL','SCRAP GENERATED PRODUCTION COST'].sum().plot(kind="barh")
    plt.ylabel('Highest cost elements on a quarterly basis (excluing RM)') 
    plt.title('Fig 4.0-QUARTERLY HIGHEST COST ELEMENTS(excluing RM) FOR THE PRODUCT RANGE IN 2019-20(in INR 10s lk)')
    plt.savefig(save_results_to + '04.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SECTION'].groupby('Fiscal_Quarter')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 5.1- QUARTERLY TFC INCURRED IN THE PRODUCTION OF MS SECTION (in INR cr)")
    save_results_to = 'C:/Users/chetali.a/Desktop/flask/static/'
    plt.savefig(save_results_to + 'tc05.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SECTION'].groupby('Month')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 5.2- MONTHLY TFC INCURRED IN THE PRODUCTION OF MS SECTION (in INR cr)")
    plt.savefig(save_results_to + 'tc06.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SECTION'].groupby('Fiscal_Quarter')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 5.3- QUARTERLY TVC INCURRED IN THE PRODUCTION OF MS SECTION (in INR 10s lk)")
    plt.savefig(save_results_to + 'tc07.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SECTION'].groupby('Month')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 5.4- MONTHLY TVC INCURRED IN THE PRODUCTION OF MS SECTION")
    plt.savefig(save_results_to + 'tc08.png', dpi = 300)
    plt.close()                            

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BAR'].groupby('Fiscal_Quarter')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 6.1- QUARTERLY TFC INCURRED IN THE PRODUCTION OF MS BAR (in INR cr)")
    plt.savefig(save_results_to + 'tc09.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BAR'].groupby('Month')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 6.2- MONTHLY TFC INCURRED IN THE PRODUCTION OF MS BAR(in INR 10s lk)")
    plt.savefig(save_results_to + 'tc10.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BAR'].groupby('Fiscal_Quarter')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 6.3- QUARTERLY TVC INCURRED IN THE PRODUCTION OF MS BAR (in INR 10s lk)")
    plt.savefig(save_results_to + 'tc11.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BAR'].groupby('Month')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 6.4- MONTHLY TVC INCURRED IN THE PRODUCTION OF MS BAR")
    plt.savefig(save_results_to + 'tc12.png', dpi = 300)
    plt.close()                             
    
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS FLATS'].groupby('Fiscal_Quarter')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 7.1- QUARTERLY TFC INCURRED IN THE PRODUCTION OF MS FLATS (in INR 10s lk)")
    plt.savefig(save_results_to + 'tc13.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS FLATS'].groupby('Month')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 7.2- MONTHLY TFC INCURRED IN THE PRODUCTION OF MS FLATS(in INR 10s lk)")
    plt.savefig(save_results_to + 'tc14.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS FLATS'].groupby('Fiscal_Quarter')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 7.3- QUARTERLY TVC INCURRED IN THE PRODUCTION OF MS FLATS")
    plt.savefig(save_results_to + 'tc15.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS FLATS'].groupby('Month')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 7.4- MONTHLY TVC INCURRED IN THE PRODUCTION OF MS FLATS")
    plt.savefig(save_results_to + 'tc16.png', dpi = 300)
    plt.close()  

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='WIRE-7217'].groupby('Fiscal_Quarter')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 8.1- QUARTERLY TFC INCURRED IN THE PRODUCTION OF WIRE-7217 (in INR 10s lk)")
    plt.savefig(save_results_to + 'tc17.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='WIRE-7217'].groupby('Month')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 8.2- MONTHLY TFC INCURRED IN THE PRODUCTION OF WIRE-7217 (in INR 10s lk)")
    plt.savefig(save_results_to + 'tc18.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='WIRE-7217'].groupby('Fiscal_Quarter')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 8.3- QUARTERLY TVC INCURRED IN THE PRODUCTION OF WIRE-7217")
    plt.savefig(save_results_to + 'tc19.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='WIRE-7217'].groupby('Month')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 8.4- MONTHLY TVC INCURRED IN THE PRODUCTION OF WIRE-7217")
    plt.savefig(save_results_to + 'tc20.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='TILLER SHOVEL-8432'].groupby('Fiscal_Quarter')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 9.1- QUARTERLY TFC INCURRED IN THE PRODUCTION OF TILLER SHOVEL-8432 (in INR 10s lk)")
    plt.savefig(save_results_to + 'tc21.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='TILLER SHOVEL-8432'].groupby('Month')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 9.2- MONTHLY TFC INCURRED IN THE PRODUCTION OF TILLER SHOVEL-8432 (in INR 10s lk)")
    plt.savefig(save_results_to + 'tc22.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='TILLER SHOVEL-8432'].groupby('Fiscal_Quarter')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 9.3- QUARTERLY TVC INCURRED IN THE PRODUCTION OF TILLER SHOVEL-8432")
    plt.savefig(save_results_to + 'tc23.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='TILLER SHOVEL-8432'].groupby('Month')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 9.4- MONTHLY TVC INCURRED IN THE PRODUCTION OF TILLER SHOVEL-8432")
    plt.savefig(save_results_to + 'tc24.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SCRAP'].groupby('Fiscal_Quarter')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 10.1- QUARTERLY TFC INCURRED IN THE TRADING OF MS SCRAP (in INR 10s lk)")
    plt.savefig(save_results_to + 'tc25.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SCRAP'].groupby('Month')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 10.2- MONTHLY TFC INCURRED IN THE TRADING OF MS SCRAP (in INR 10s lk)")
    plt.savefig(save_results_to + 'tc26.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SCRAP'].groupby('Fiscal_Quarter')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 10.3- QUARTERLY TVC INCURRED IN THE TRADING OF MS SCRAP")
    plt.savefig(save_results_to + 'tc27.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SCRAP'].groupby('Month')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 10.4- MONTHLY TVC INCURRED IN THE TRADING OF MS SCRAP")
    plt.savefig(save_results_to + 'tc28.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='HEAVY SIDE CUTTING'].groupby('Fiscal_Quarter')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 11.1- QUARTERLY TFC INCURRED IN THE TRADING OF HEAVY SIDE CUTTING (in INR 10s lk)")
    plt.savefig(save_results_to + 'tc29.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='HEAVY SIDE CUTTING'].groupby('Month')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 11.2- MONTHLY TFC INCURRED IN THE TRADING OF HEAVY SIDE CUTTING (in INR 10s lk)")
    plt.savefig(save_results_to + 'tc30.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='HEAVY SIDE CUTTING'].groupby('Fiscal_Quarter')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 11.3- QUARTERLY TVC INCURRED IN THE TRADING OF HEAVY SIDE CUTTING")
    plt.savefig(save_results_to + 'tc31.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='HEAVY SIDE CUTTING'].groupby('Month')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 11.4- MONTHLY TVC INCURRED IN THE TRADING OF HEAVY SIDE CUTTING")
    plt.savefig(save_results_to + 'tc32.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BILLETS'].groupby('Fiscal_Quarter')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 12.1- QUARTERLY TFC INCURRED IN THE TRADING OF MS BILLETS (in INR cr)")
    plt.savefig(save_results_to + 'tc33.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BILLETS'].groupby('Month')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 12.2- MONTHLY TFC INCURRED IN THE TRADING OF MS BILLETS (in INR cr)")
    plt.savefig(save_results_to + 'tc34.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BILLETS'].groupby('Fiscal_Quarter')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 12.3- QUARTERLY TVC INCURRED IN THE TRADING OF MS BILLETS")
    plt.savefig(save_results_to + 'tc35.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BILLETS'].groupby('Month')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 12.4- MONTHLY TVC INCURRED IN THE TRADING OF MS BILLETS")
    plt.savefig(save_results_to + 'tc36.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='COAL'].groupby('Fiscal_Quarter')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 13.1- QUARTERLY TFC INCURRED IN THE TRADING OF COAL")
    plt.savefig(save_results_to + 'tc37.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='COAL'].groupby('Month')['Product ','TOTAL FIXED COST'].sum())
    plt.title("Fig 13.2- MONTHLY TFC INCURRED IN THE TRADING OF COAL")
    plt.savefig(save_results_to + 'tc38.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='COAL'].groupby('Fiscal_Quarter')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 13.3- QUARTERLY TVC INCURRED IN THE TRADING OF COAL")
    plt.savefig(save_results_to + 'tc39.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='COAL'].groupby('Month')['Product ','TOTAL VARIABLE COST'].sum())
    plt.title("Fig 13.4- MONTHLY TVC INCURRED IN THE TRADING OF COAL")
    plt.savefig(save_results_to + 'tc40.png', dpi = 300)
    plt.close()




    pop = os.listdir('static/transactioncost')
    pop=['transactioncost/'+image for image in pop]
    pop=pop[0:4]
    return render_template('transactioncost.html' ,image_names= pop)

    
@app.route('/customeranalysis')
def func4():
    df=pd.read_excel(r'C:\Users\chetali.a\Desktop\python\database\final_customer_sheet.xlsx')
    df['Date'] = pd.to_datetime(df['Date'])
    df['Quarter']=df['Date'].dt.quarter
    df['Month']=df['Date'].dt.month
    df['Fiscal_Quarter'] = df["Quarter"].replace({3.0:'Q2FY19-20', 4.0:'Q3FY19-20', 2.0:'Q1FY19-20', 1.0:'Q4FY19-20'})
    df = df.drop('Quarter', axis = 1)
    df["Month"].replace({1.0:'10-Jan 2020',2.0:'11-Feb 2020',3.0:'12-March 2020',4.0:'01-April 2019',5.0:'02-May 2019',6.0:"03-June 2019",7.0:'04-July 2019',8.0:'05-Aug 2019',9.0:'06-Sept 2019',10.0:'07-Oct 2019',11.0:'08-Nov 2019',12.0:'09-Dec 2019'},inplace=True)
    df["Product "].replace({'Ms Scrap':'MS SCRAP','MS Flats':'MS FLATS','MS Bar':'MS BAR','Wire-7217':'WIRE-7217','MS Section':'MS SECTION','TILLER SHOVEL':'TILLER SHOVEL-8432','Milscale':'MILSCALE','MS Billets':'MS BILLETS','Ms Scrap-MELTING':'MS SCRAP MELTING','Ms Billets':'MS BILLETS', 'MS Scrap':'MS SCRAP','WIRE- 7217':'WIRE-7217'},inplace=True)
    
    plt.figure(figsize=(20,7))
    variable1=df.groupby(['Fiscal_Quarter','Party'])['Amount ',"Party"].sum()
    variable2 = variable1['Amount '].groupby(level=0,group_keys=False)
    variable3 = variable2.apply(lambda x: x.sort_values(ascending=False).head(3))
    grouped_dataset1=pd.DataFrame(variable3)
    grouped_dataset1.reset_index(inplace=True)
    g = sns.barplot(data=grouped_dataset1, x="Fiscal_Quarter", y="Amount ", hue="Party").set_title("Fig 1.0- TOP 3 CUSTOMERS WITH HIGHEST REVENUE IN 2019-20(in INR cr)")
    save_results_to = 'C:/Users/chetali.a/Desktop/flask/static/customeranalysis/'
    plt.savefig(save_results_to + '01.png', dpi = 300)
    plt.close()

    variablex=df.groupby(['Fiscal_Quarter','Party'])['Amount ',"Party"].count()
    variabley = variablex['Amount '].groupby(level=0,group_keys=False)
    variablez = variabley.apply(lambda x: x.sort_values(ascending=False).head(3))
    grouped_dataset2=pd.DataFrame(variablez)
    grouped_dataset2.reset_index(inplace=True)
    plt.figure(figsize=(20, 7))
    g1 = sns.barplot(data=grouped_dataset2, x="Fiscal_Quarter", y="Amount ", hue="Party").set_title("Fig 2.0- TOP 3 CUSTOMERS WITH HIGHEST NO. OF TRANSACTIONS IN 2019-20")
    plt.savefig(save_results_to + '02.png', dpi = 300)
    plt.close()

    m=df.groupby(['Fiscal_Quarter','Party'])['MARGIN',"Party"].sum()
    n = m['MARGIN'].groupby(level=0,group_keys=False)
    o = n.apply(lambda x: x.sort_values(ascending=False).head(3))
    setz=pd.DataFrame(o)
    setz.reset_index(inplace=True)
    plt.figure(figsize=(20, 7))
    p = sns.barplot(data=setz, x="Fiscal_Quarter", y="MARGIN", hue="Party").set_title("Fig 3.0- TOP 3 CUSTOMERS WITH HIGHEST MARGIN IN 2019-20(in INR 10s lk)")
    plt.savefig(save_results_to + '03.png', dpi = 300)
    plt.close()

    x=df.groupby(['Fiscal_Quarter','Party'])['TOTAL COST',"Party"].sum()
    y = x['TOTAL COST'].groupby(level=0,group_keys=False)
    z = y.apply(lambda x: x.sort_values(ascending=False).head(3))
    sety=pd.DataFrame(z)
    sety.reset_index(inplace=True)
    plt.figure(figsize=(20, 7))
    w = sns.barplot(data=sety, x="Fiscal_Quarter", y="TOTAL COST", hue="Party").set_title("Fig 4.0- TOP 3 CUSTOMERS WITH HIGHEST TOTAL COST IN 2019-20 (in INR cr)")
    plt.savefig(save_results_to + '04.png', dpi = 300)
    plt.close()


    x1=df.groupby(['Fiscal_Quarter','Party'])['Freight (Delivery)',"Party"].sum()
    y1 = x1['Freight (Delivery)'].groupby(level=0,group_keys=False)
    z1 = y1.apply(lambda x: x.sort_values(ascending=False).head(3))
    sety1=pd.DataFrame(z1)
    sety1.reset_index(inplace=True)
    plt.figure(figsize=(20, 7))
    w1 = sns.barplot(data=sety1, x="Fiscal_Quarter", y="Freight (Delivery)", hue="Party").set_title("Fig 5.0- TOP 3 CUSTOMERS WITH HIGHEST FREIGHT DELIVERY COST IN 2019-20 (in INR)")
    plt.savefig(save_results_to + '05.png', dpi = 300)
    plt.close()

    shade = os.listdir('static/customeranalysis')
    shade=['customeranalysis/'+image for image in shade]
    return render_template('customeranalysis.html' ,image_names= shade)

@app.route('/supplieranalysis')
def func5():
    df=pd.read_excel(r'C:\Users\chetali.a\Desktop\python\database\FINAL_MASTER_SHEET_SUPPLIER.xlsx')
    df['Date'] = pd.to_datetime(df['Date'])
    df["Quarter"]=df['Date'].dt.quarter
    df["Month"]=df['Date'].dt.month
    df['Fiscal_Quarter'] = df["Quarter"].replace({3.0:'Q2FY19-20', 4.0:'Q3FY19-20', 2.0:'Q1FY19-20', 1.0:'Q4FY19-20'})
    df = df.drop('Quarter', axis = 1)
    df["Product"].replace({"Heavy Side Cutting":'HEAVY SIDE CUTTING',"Oxygen Commercial Gas":'OXYGEN COMMERCIAL GAS',"Wire-7217":'WIRE-7217'},inplace=True)
    df["Product Category"].replace({"Section Steel":'SECTION STEEL',"Miscellaneous":'MISCELLANEOUS'},inplace=True)
    df["Month"].replace({1.0:'10-Jan 2020',2.0:'11-Feb 2020',3.0:'12-March 2020',4.0:'01-April 2019',5.0:'02-May 2019',6.0:"03-June 2019",7.0:'04-July 2019',8.0:'05-Aug 2019',9.0:'06-Sept 2019',10.0:'07-Oct 2019',11.0:'08-Nov 2019',12.0:'09-Dec 2019'},inplace=True)

    plt.figure(figsize=(20,7))
    df.groupby('Month')["Amount "].sum().plot(kind="bar",color="green",title="Fig 1.0- MONTHLY SUPPLIER EXPENSES in 2019-20(in INR)")
    plt.ylabel("Monthly Supplier Expenses")
    save_results_to = 'C:/Users/chetali.a/Desktop/flask/static/supplieranalysis/'
    plt.savefig(save_results_to + '01.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20,7))
    df.groupby('Fiscal_Quarter')["Amount "].sum().plot(kind="bar",color="red",title="Fig 2.0-MONTHLY SUPPLIER EXPENSES in 2019-20(in INR)")
    plt.ylabel("Quarterly Supplier Expenses")
    plt.savefig(save_results_to + '02.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20,7))
    df.groupby('Month')["Amount "].count().plot(kind="barh",color="green",title="Fig 3.0- MONTHLY NO. OF TRANSACTIONS - SUPPLIER EXPENSES in 2019-20(in INR)")
    plt.ylabel("Monthly Number of Transactions")
    plt.savefig(save_results_to + '03.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20,7))
    df.groupby('Fiscal_Quarter')["Amount "].count().plot(kind="barh",color="red",title="Fig 4.0-QUARTERLY NO. OF TRANSACTIONS- SUPPLIER EXPENSES in 2019-20(in INR)")
    plt.ylabel("Quarterly Number of Transactions")
    plt.savefig(save_results_to + '04.png', dpi = 300)
    plt.close()

    v13=df.groupby(['Fiscal_Quarter','Party'])['Amount ',"Party"].sum()
    v14 = v13['Amount '].groupby(level=0,group_keys=False)
    v15 = v14.apply(lambda x: x.sort_values(ascending=False).head(3))
    sheet5=pd.DataFrame(v15)
    sheet5.reset_index(inplace=True)
    plt.figure(figsize=(6, 7))
    gu = sns.barplot(data=sheet5, x="Fiscal_Quarter", y="Amount ", hue="Party").set_title("Fig 5.0-TOP 3 CUSTOMERS WITH HIGHEST SUPPLIER EXPENSES IN 2019-20")
    save_results_to = 'C:/Users/chetali.a/Desktop/flask/static/'
    plt.savefig(save_results_to + 's05.png', dpi = 300)
    plt.close()

    v16=df.groupby(['Fiscal_Quarter','Party'])['Amount ',"Party"].count()
    v17 = v16['Amount '].groupby(level=0,group_keys=False)
    v18 = v17.apply(lambda x: x.sort_values(ascending=False).head(3))
    sheet6=pd.DataFrame(v18)
    sheet6.reset_index(inplace=True)
    plt.figure(figsize=(16, 7))
    gx = sns.barplot(data=sheet6, x="Fiscal_Quarter", y="Amount ", hue="Party").set_title("Fig 6.0-TOP 3 CUSTOMERS WITH HIGHEST NUMBER OF TRANSACTIONS- SUPPLIER EXPENSES IN 2019-20")
    plt.savefig(save_results_to + 's06.png', dpi = 300)
    plt.close()

    v1=df.groupby(['Fiscal_Quarter','Product'])['Amount ',"Product"].sum()
    v2 = v1['Amount '].groupby(level=0,group_keys=False)
    v3 = v2.apply(lambda x: x.sort_values(ascending=False).head(3))
    sheet1=pd.DataFrame(v3)
    sheet1.reset_index(inplace=True)
    plt.figure(figsize=(16, 7))
    ggy = sns.barplot(data=sheet1, x="Fiscal_Quarter", y="Amount ", hue="Product").set_title("Fig 7.0-TOP 3 PRODUCTS WITH HIGHEST QUARTERLY SUPPLIER EXPENSES IN 2019-20")
    plt.savefig(save_results_to + 's07.png', dpi = 300)
    plt.close()

    v4=df.groupby(['Fiscal_Quarter','Product Category'])['Amount ',"Product Category"].sum()
    v5 = v4['Amount '].groupby(level=0,group_keys=False)
    v6 = v5.apply(lambda x: x.sort_values(ascending=False).head(3))
    sheet2=pd.DataFrame(v6)
    sheet2.reset_index(inplace=True)
    plt.figure(figsize=(16, 7))
    gnu = sns.barplot(data=sheet2, x="Fiscal_Quarter", y="Amount ", hue="Product Category").set_title("Fig 8.0-TOP 3 PRODUCT CATEGORIES WITH HIGHEST QUARTERLY SUPPLIER EXPENSES IN 2019-20")
    plt.savefig(save_results_to + 's08.png', dpi = 300)
    plt.close()

    v7=df.groupby(['Fiscal_Quarter','Product'])['Amount ',"Product"].count()
    v8 = v7['Amount '].groupby(level=0,group_keys=False)
    v9 = v8.apply(lambda x: x.sort_values(ascending=False).head(3))
    sheet3=pd.DataFrame(v9)
    sheet3.reset_index(inplace=True)
    plt.figure(figsize=(16, 7))
    gi = sns.barplot(data=sheet3, x="Fiscal_Quarter", y="Amount ", hue="Product").set_title("Fig 9.0-TOP 3 PRODUCTS WITH HIGHEST NUMBER OF TRANSACTIONS- SUPPLIER EXPENSES IN 2019-20")
    plt.savefig(save_results_to + 's09.png', dpi = 300)
    plt.close()


    v10=df.groupby(['Fiscal_Quarter','Product Category'])['Amount ',"Product Category"].count()
    v11 = v10['Amount '].groupby(level=0,group_keys=False)
    v12 = v11.apply(lambda x: x.sort_values(ascending=False).head(3))
    sheet4=pd.DataFrame(v12)
    sheet4.reset_index(inplace=True)
    plt.figure(figsize=(16, 7))
    gj = sns.barplot(data=sheet4, x="Fiscal_Quarter", y="Amount ", hue="Product Category").set_title("Fig 10.0-TOP 3 PRODUCT CATEGORIES WITH HIGHEST NUMBER OF TRANSACTIONS- SUPPLIER EXPENSES IN 2019-20")
    plt.savefig(save_results_to + 's10.png', dpi = 300)
    plt.close()

    df['Product'].value_counts().plot(kind='pie', fontsize=12, autopct='%0.1f%%', figsize=(20,20), shadow=True, startangle=0, legend=True) #explode=[0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05],
    plt.ylabel('Market Share of each product')
    plt.title('Fig 11.0-SHARE OF NUMBER OF TRANSACTIONS IN EACH PRODUCT- SUPPLIER EXPENSES IN 2019-20')
    plt.savefig(save_results_to + 's11.png', dpi = 300)
    plt.close()

    df.groupby('Product')["Amount "].sum().plot(kind='pie', fontsize=10, autopct='%0.1f%%', figsize=(10,10), shadow=True, startangle=0, legend=True) #explode=[0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05]
    plt.ylabel('Market Share of each product category in terms of Expenses')
    plt.title('Fig 12.0-SHARE OF SUPPLIER EXPENSES IN EACH PRODUCT IN 2019-20')
    plt.savefig(save_results_to + 's12.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product']=='MS SCRAP'].groupby('Month',as_index=False)['Product','Amount '].sum(),x="Month", y="Amount ",sort=True)
    plt.title("Fig 13.1-MONTHLY EXPENSES INCURRED FROM MS SCRAP- 2019-20 (in INR)")
    plt.savefig(save_results_to + 's13.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product']=='MS SCRAP'].groupby('Month',as_index=False)['Product','Amount '].count(),x="Month", y="Amount ",sort=True)
    plt.title("Fig 13.2-MONTHLY NUMBER OF TRANSACTIONS FOR MS SCRAP- 2019-20")
    plt.savefig(save_results_to + 's14.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product']=='MS SCRAP'].groupby('Month',as_index=False)['Product','Qty ( in MT)'].sum(),x="Month", y="Qty ( in MT)",sort=True)
    plt.title("Fig 13.3-MONTHLY QUANTITY BOUGHT FOR MS SCRAP- 2019-20")
    plt.savefig(save_results_to + 's15.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product']=='MS SCRAP'].groupby('Month',as_index=False)['Rate(per Item in INR)'].mean(),x="Month", y="Rate(per Item in INR)",sort=True)
    plt.title("Fig 13.4-MONTHLY AVERAGE PRICE FOR MS SCRAP- 2019-20 (in INR)")
    plt.savefig(save_results_to + 's16.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product Category']=='SECTION STEEL'].groupby('Month',as_index=False)['Product','Amount '].sum(),x="Month", y="Amount ",sort=True)
    plt.title("Fig 14.0-MONTHLY EXPENSES INCURRED FROM SECTION STEEL- 2019-20 (in INR)")
    plt.savefig(save_results_to + 's17.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product Category']=='SECTION STEEL'].groupby('Month',as_index=False)['Product','Amount '].count(),x="Month", y="Amount ",sort=True)
    plt.title("Fig 14.1-MONTHLY NUMBER OF TRANSACTIONS FOR SECTION STEEL- 2019-20")
    plt.savefig(save_results_to + 's18.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product Category']=='SECTION STEEL'].groupby('Month',as_index=False)['Product','Qty ( in MT)'].sum(),x="Month", y="Qty ( in MT)",sort=True)
    plt.title("Fig 14.2-MONTHLY QUANTITY BOUGHT FOR SECTION STEEL- 2019-20")
    plt.savefig(save_results_to + 's19.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product Category']=='SECTION STEEL'].groupby('Month',as_index=False)['Rate(per Item in INR)'].mean(),x="Month", y="Rate(per Item in INR)",sort=True)
    plt.title("Fig 14.3-MONTHLY AVERAGE PRICE FOR SECTION STEEL- 2019-20 (in INR)")
    plt.savefig(save_results_to + 's20.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product']=='WIRE-7217'].groupby('Month',as_index=False)['Product','Amount '].sum(),x="Month", y="Amount ",sort=True)
    plt.title("Fig 15.1-MONTHLY EXPENSES INCURRED FROM WIRE-7217- 2019-20 (in INR)")
    plt.savefig(save_results_to + 's21.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product']=='WIRE-7217'].groupby('Month',as_index=False)['Product','Amount '].count(),x="Month", y="Amount ",sort=True)
    plt.title("Fig 15.2-MONTHLY NUMBER OF TRANSACTIONS FOR WIRE-7217- 2019-20")
    plt.savefig(save_results_to + 's22.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product']=='WIRE-7217'].groupby('Month',as_index=False)['Product','Qty ( in MT)'].sum(),x="Month", y="Qty ( in MT)",sort=True)
    plt.title("Fig 15.3-MONTHLY QUANTITY BOUGHT FOR WIRE-7217- 2019-20")
    plt.savefig(save_results_to + 's23.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product']=='WIRE-7217'].groupby('Month',as_index=False)['Rate(per Item in INR)'].mean(),x="Month", y="Rate(per Item in INR)",sort=True)
    plt.title("Fig 15.4-MONTHLY AVERAGE PRICE FOR WIRE-7217- 2019-20 (in INR)")
    plt.savefig(save_results_to + 's24.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product']=='HEAVY SIDE CUTTING'].groupby('Month',as_index=False)['Product','Amount '].sum(),x="Month", y="Amount ",sort=True)
    plt.title("Fig 16.1-MONTHLY EXPENSES INCURRED FROM HEAVY SIDE CUTTING - 2019-20 (in INR)")
    plt.savefig(save_results_to + 's25.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product']=='HEAVY SIDE CUTTING'].groupby('Month',as_index=False)['Product','Amount '].count(),x="Month", y="Amount ",sort=True)
    plt.title("Fig 16.2-MONTHLY NUMBER OF TRANSACTIONS FOR HEAVY SIDE CUTTING- 2019-20")
    plt.savefig(save_results_to + 's26.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product']=='HEAVY SIDE CUTTING'].groupby('Month',as_index=False)['Product','Qty ( in MT)'].sum(),x="Month", y="Qty ( in MT)",sort=True)
    plt.title("Fig 16.3-MONTHLY QUANTITY BOUGHT FOR HEAVY SIDE CUTTING- 2019-20")
    plt.savefig(save_results_to + 's27.png', dpi = 300)
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product']=='HEAVY SIDE CUTTING'].groupby('Month',as_index=False)['Rate(per Item in INR)'].mean(),x="Month", y="Rate(per Item in INR)",sort=True)
    plt.title("Fig 16.4-MONTHLY AVERAGE PRICE FOR HEAVY SIDE CUTTING- 2019-20 (in INR)")
    plt.savefig(save_results_to + 's28.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product Category']=='OVERHEAD COST'].groupby('Month',as_index=False)['Product','Amount '].sum(),x="Month", y="Amount ",sort=True)
    plt.title(" Fig 17.1 Montly Expenses generated because of OVERHEAD COST- 2019-20 (in INR)")
    plt.savefig(save_results_to + 's29.png', dpi = 300)  
    plt.close()  
    plt.figure(figsize=(16, 7))
    sns.lineplot(data=df[df['Product Category']=='OVERHEAD COST'].groupby('Month',as_index=False)['Product','Amount '].count(),x="Month", y="Amount ",sort=True)
    plt.title(" Fig 17.2 Montly No. of Transactions OVERHEAD COST- 2019-20")
    plt.savefig(save_results_to + 's30.png', dpi = 300)  
    plt.close()

    shades = os.listdir('static/supplieranalysis')
    shades=['supplieranalysis/'+image for image in shades]
    shades=shades[0:4]
    return render_template('supplieranalysisfinal.html' ,image_names= shades)

@app.route('/productanalysis')
def func6():  
    df=pd.read_excel(r'C:\Users\chetali.a\Desktop\python\database\final_customer_sheet.xlsx')
    df['Date'] = pd.to_datetime(df['Date'])
    df['Quarter']=df['Date'].dt.quarter
    df['Month']=df['Date'].dt.month
    df['Fiscal_Quarter'] = df["Quarter"].replace({3.0:'Q2FY19-20', 4.0:'Q3FY19-20', 2.0:'Q1FY19-20', 1.0:'Q4FY19-20'})
    df = df.drop('Quarter', axis = 1)
    df["Month"].replace({1.0:'10-Jan 2020',2.0:'11-Feb 2020',3.0:'12-March 2020',4.0:'01-April 2019',5.0:'02-May 2019',6.0:"03-June 2019",7.0:'04-July 2019',8.0:'05-Aug 2019',9.0:'06-Sept 2019',10.0:'07-Oct 2019',11.0:'08-Nov 2019',12.0:'09-Dec 2019'},inplace=True)
    df["Product "].replace({'Ms Scrap':'MS SCRAP','MS Flats':'MS FLATS','MS Bar':'MS BAR','Wire-7217':'WIRE-7217','MS Section':'MS SECTION','TILLER SHOVEL':'TILLER SHOVEL-8432','Milscale':'MILSCALE','MS Billets':'MS BILLETS','Ms Scrap-MELTING':'MS SCRAP MELTING','Ms Billets':'MS BILLETS', 'MS Scrap':'MS SCRAP','WIRE- 7217':'WIRE-7217'},inplace=True)
    
    variable61=df.groupby(['Fiscal_Quarter','Product '])['Amount ',"Product "].sum()
    variable71 = variable61['Amount '].groupby(level=0,group_keys=False)
    variable81 = variable71.apply(lambda x: x.sort_values(ascending=False).head(4))
    grouped_dataset21=pd.DataFrame(variable81)
    grouped_dataset21.reset_index(inplace=True)
    plt.figure(figsize=(20, 7))
    gz = sns.barplot(data=grouped_dataset21, x="Fiscal_Quarter", y="Amount ", hue="Product ").set_title("Fig 1.0-TOP 4 PRODUCTS WITH HIGHEST REVENUE IN 2019-20 (in INR)")
    save_results_to = 'C:/Users/chetali.a/Desktop/flask/static/productanalysis/'
    plt.savefig(save_results_to + '01.png', dpi = 300)
    plt.close()

    variable62=df.groupby(['Fiscal_Quarter','Product '])['Amount ',"Product "].count()
    variable72 = variable62['Amount '].groupby(level=0,group_keys=False)
    variable82 = variable72.apply(lambda x: x.sort_values(ascending=False).head(4))
    grouped_dataset20=pd.DataFrame(variable82)
    grouped_dataset20.reset_index(inplace=True)
    plt.figure(figsize=(16, 7))
    kl = sns.barplot(data=grouped_dataset20, x="Fiscal_Quarter", y="Amount ", hue="Product ").set_title("Fig 2.0-TOP 4 PRODUCTS WITH HIGHEST NO. OF TRANSACTIONS IN 2019-20")
    plt.savefig(save_results_to + '02.png', dpi = 300)
    plt.close()

    xyz=df.groupby('Product ').sum()
    xyz["Amount "].plot(kind='pie', fontsize=14, autopct='%0.1f%%',  figsize=(20,20), shadow=True, startangle=0, legend=True)#explode=[0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05],
    plt.ylabel('Market Share of each product')
    plt.title('Fig 3.0- SHARE OF REVENUE GENERATED FOR EACH PRODUCT IN 2019-20') 
    plt.savefig(save_results_to + '03.png', dpi = 300)
    plt.close()
     
    df['Product '].value_counts().plot(kind='pie', fontsize=14, autopct='%0.1f%%', figsize=(20,20), shadow=True, startangle=0, legend=True) #explode=[0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05],
    plt.ylabel('Market Share of each product')
    plt.title('Fig 4.0- NUMBER OF TRANSACTIONS FOR EACH PRODUCT IN 2019-20') 
    plt.savefig(save_results_to + '04.png', dpi = 300)
    plt.close()

    var16=df.groupby(['Fiscal_Quarter','Product '])['Freight (Delivery)',"Product "].sum()
    var17= var16['Freight (Delivery)'].groupby(level=0,group_keys=False)
    var18 = var17.apply(lambda x: x.sort_values(ascending=False).head(3))
    dataset3=pd.DataFrame(var18)
    dataset3.reset_index(inplace=True)
    plt.figure(figsize=(20, 7))
    g = sns.barplot(data=dataset3, x='Fiscal_Quarter', y="Freight (Delivery)", hue="Product ").set_title("Fig 5.0-TOP 3 PRODUCTS WITH HIGHEST FREIGHT CHARGES IN 2019-20 (in INR)")
    plt.savefig(save_results_to + '05.png', dpi = 300)
    plt.close() 

    xyz1 = df.groupby('Product ')['Qty ( in MT)', 'MARGIN'].mean()
    xyz2 = pd.DataFrame(xyz1)
    xyz2['Margin per Tonne']=(xyz2['MARGIN']/xyz2['Qty ( in MT)'])
    xyz2.reset_index(inplace=True)
    plt.figure(figsize=(20, 7))
    sns.barplot(data=xyz2, x="Product ", y='Margin per Tonne',order=xyz2.sort_values('Margin per Tonne')['Product ']).set_title("Fig 6.0-PRODUCTS WITH MARGINS IN 2019-20 (in INR)")
    plt.axhline(y=0)
    plt.axvline(x=-0.5)
    plt.xticks(rotation=90)
    plt.savefig(save_results_to + '06.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    df.groupby('Product ')['MARGIN'].sum().sort_values(ascending=False).plot(kind="bar",color="Green")
    plt.axhline(y=0)
    plt.axvline(x=12)
    plt.ylabel('Product Margins')
    plt.title('Fig 7.0- MARGINS GENERATED FOR EACH PRODUCT IN 2019-20(in INR)')
    plt.savefig(save_results_to + '07.png', dpi = 300)
    plt.close()

    b=df.groupby(['Fiscal_Quarter','Product '])['MARGIN',"Product "].sum()
    c = b['MARGIN'].groupby(level=0,group_keys=False)
    d = c.apply(lambda x: x.sort_values(ascending=False).head(3))
    dataset19=pd.DataFrame(d)
    dataset19.reset_index(inplace=True)
    plt.figure(figsize=(20, 7))
    g1 = sns.barplot(data=dataset19, x="Fiscal_Quarter", y="MARGIN", hue="Product ").set_title("Fig 8.0-TOP 3 PRODUCTS WITH HIGHEST MARGINS IN 2019-20 (in INR)")
    plt.savefig(save_results_to + '08.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SECTION'].groupby('Fiscal_Quarter')['Product ','MARGIN'].sum())
    plt.title("Fig 9.1- QUARTERLY MARGIN GENERATED FROM MS SECTION IN 2019-20 (in INR)")
    plt.savefig(save_results_to + '09.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SECTION'].groupby('Month')['Product ','MARGIN'].sum())
    plt.title("Fig 9.2-MONTHLY MARGIN GENERATED FROM MS SECTION- 2019-20 (in INR)")
    plt.savefig(save_results_to + '10.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BAR'].groupby('Fiscal_Quarter')['Product ','MARGIN'].sum())
    plt.title("Fig 10.1- QUARTERLY MARGIN GENERATED FROM MS BAR IN 2019-20 (in INR)")
    plt.savefig(save_results_to + '11.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BAR'].groupby('Month')['Product ','MARGIN'].sum())
    plt.title("Fig 10.2-MONTHLY MARGIN GENERATED FROM MS BAR- 2019-20 (in INR)")
    plt.savefig(save_results_to + '12.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS FLATS'].groupby('Fiscal_Quarter')['Product ','MARGIN'].sum())
    plt.title("Fig 11.1- QUARTERLY MARGIN GENERATED FROM MS FLATS IN 2019-20 (in INR)")
    plt.savefig(save_results_to + '13.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS FLATS'].groupby('Month')['Product ','MARGIN'].sum())
    plt.title("Fig 11.2-MONTHLY MARGIN GENERATED FROM MS FLATS- 2019-20 (in INR)")
    plt.savefig(save_results_to + '14.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='WIRE-7217'].groupby('Fiscal_Quarter')['Product ','MARGIN'].sum())
    plt.title("Fig 12.1- QUARTERLY MARGIN GENERATED FROM WIRE-7217 IN 2019-20 (in INR)")
    plt.savefig(save_results_to + '15.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='WIRE-7217'].groupby('Month')['Product ','MARGIN'].sum())
    plt.title("Fig 12.2-MONTHLY MARGIN GENERATED FROM WIRE-7217- 2019-20 (in INR)")
    plt.savefig(save_results_to + '16.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='TILLER SHOVEL-8432'].groupby('Fiscal_Quarter')['Product ','MARGIN'].sum())
    plt.title("Fig 13.1- QUARTERLY MARGIN GENERATED FROM TILLER SHOVEL-8432 IN 2019-20 (in INR)")
    plt.savefig(save_results_to + '17.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='TILLER SHOVEL-8432'].groupby('Month')['Product ','MARGIN'].sum())
    plt.title("Fig 13.2-MONTHLY MARGIN GENERATED FROM TILLER SHOVEL-8432 2019-20 (in INR)")
    plt.savefig(save_results_to + '18.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BILLETS'].groupby('Fiscal_Quarter')['Product ','MARGIN'].sum())
    plt.title("Fig 14.1- QUARTERLY MARGIN GENERATED FROM MS BILLETS IN 2019-20 (in INR)")
    plt.savefig(save_results_to + '19.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS BILLETS'].groupby('Month')['Product ','MARGIN'].sum())
    plt.title("Fig 14.2-MONTHLY MARGIN GENERATED FROM MS BILLETS 2019-20 (in INR)")
    plt.savefig(save_results_to + '20.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SCRAP'].groupby('Fiscal_Quarter')['Product ','MARGIN'].sum())
    plt.title("Fig 15.1- QUARTERLY MARGIN GENERATED FROM MS SCRAP IN 2019-20 (in INR)")
    plt.savefig(save_results_to + '21.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='MS SCRAP'].groupby('Month')['Product ','MARGIN'].sum())
    plt.title("Fig 15.2-MONTHLY MARGIN GENERATED FROM MS SCRAP 2019-20 (in INR)")
    plt.savefig(save_results_to + '22.png', dpi = 300)
    plt.close()

    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='HEAVY SIDE CUTTING'].groupby('Fiscal_Quarter')['Product ','MARGIN'].sum())
    plt.title("Fig 16.1- QUARTERLY MARGIN GENERATED FROM HEAVY SIDE CUTTING IN 2019-20 (in INR)")
    plt.savefig(save_results_to + '23.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.lineplot(data=df[df['Product ']=='HEAVY SIDE CUTTING'].groupby('Month')['Product ','MARGIN'].sum())
    plt.title("Fig 16.2-MONTHLY MARGIN GENERATED FROM HEAVY SIDE CUTTING 2019-20 (in INR)")
    plt.savefig(save_results_to + '24.png', dpi = 300)
    plt.close()

    sheetxyz=df.set_index("Product ")
    rowsxyz=sheetxyz.loc[['MS BAR','MS FLATS','WIRE-7217','TILLER SHOVEL-8432','MS SECTION','MILSCALE']]
    rowsxyz.reset_index(inplace=True)
    plt.figure(figsize=(20, 7))
    sns.barplot(data=rowsxyz, x="Product ", y='MARGIN').set_title("Fig 17.1-MARGIN GENERATED THROUGH MANUFACTURING IN 2019-20 (in INR)")
    plt.axhline(y=0)
    plt.axvline(x=-0.5)
    plt.savefig(save_results_to + '25.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.barplot(data=rowsxyz, x="Product ", y='TOTAL COST').set_title("Fig 17.2-TOTAL COST INCURRED IN MANUFACTURING IN 2019-20 (in INR)")
    plt.axhline(y=0)
    plt.axvline(x=-0.5)
    plt.savefig(save_results_to + '26.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.barplot(data=rowsxyz, x="Product ", y='Amount ').set_title("Fig 17.3-REVENUE GENERATED THROUGH MANUFACTURING IN 2019-20 (in INR)")
    plt.axhline(y=0)
    plt.axvline(x=-0.5)
    plt.savefig(save_results_to + '27.png', dpi = 300)
    plt.close()

    rowsabc=sheetxyz.loc[['COAL','MS SCRAP','HEAVY SIDE CUTTING','MS BILLETS','RV HEX HEAD SDS SCREW']]
    rowsabc.reset_index(inplace=True)
    plt.figure(figsize=(20, 7))
    sns.barplot(data=rowsabc, x="Product ", y='MARGIN').set_title("Fig 18.1-MARGIN GENERATED THROUGH TRADING IN 2019-20 (in INR)")
    plt.axhline(y=0)
    plt.axvline(x=-0.5)
    plt.savefig(save_results_to + '28.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.barplot(data=rowsabc, x="Product ", y='TOTAL COST').set_title("Fig 18.2-TOTAL COST INCURRED IN TRADING IN 2019-20 (in INR)")
    plt.axhline(y=0)
    plt.axvline(x=-0.5)
    plt.savefig(save_results_to + '29.png', dpi = 300)
    plt.close()
    plt.figure(figsize=(20, 7))
    sns.barplot(data=rowsabc, x="Product ", y='Amount ').set_title("Fig 18.3-REVENUE GENERATED THROUGH TRADING  IN 2019-20 (in INR)")
    plt.axhline(y=0)
    plt.axvline(x=-0.5)
    plt.savefig(save_results_to + '30.png', dpi = 300)
    plt.close()

    result = os.listdir('static/productanalysis')
    result =['productanalysis/'+image for image in result]
    return render_template('productanalysisfinal.html' ,image_names= result)



@app.route('/Company Revenues/')
def test():
    img = io.BytesIO()
    df = pd.read_excel(r'C:\Users\chetali.a\Desktop\python\database\final_customer_sheet.xlsx')
    df['Date'] = pd.to_datetime(df['Date'])
    df['Month']=df['Date'].dt.month
    df['Quarter']=df['Date'].dt.quarter
    df['Fiscal_Quarter'] = df["Quarter"].replace({3.0:'Q2FY19-20', 4.0:'Q3FY19-20', 2.0:'Q1FY19-20', 1.0:'Q4FY19-20'})
    df = df.drop('Quarter', axis = 1)
    df["Month"].replace({1.0:'10-Jan 2020',2.0:'11-Feb 2020',3.0:'12-March 2020',4.0:'01-April 2019',5.0:'02-May 2019',6.0:"03-June 2019",7.0:'04-July 2019',8.0:'05-Aug 2019',9.0:'06-Sept 2019',10.0:'07-Oct 2019',11.0:'08-Nov 2019',12.0:'09-Dec 2019'},inplace=True)
    df["Product "].replace({'Ms Scrap':'MS SCRAP','MS Flats':'MS FLATS','MS Bar':'MS BAR','Wire-7217':'WIRE-7217',
                        'MS Section':'MS SECTION','TILLER SHOVEL':'TILLER SHOVEL-8432','Milscale':'MILSCALE','MS Billets':'MS BILLETS',
                        'Ms Scrap-MELTING':'MS SCRAP MELTING','Ms Billets':'MS BILLETS', 'MS Scrap':'MS SCRAP','WIRE- 7217':'WIRE-7217'},inplace=True)
    plt.figure(figsize=(16, 7))
    df.groupby('Fiscal_Quarter')['Amount '].sum().plot(kind="bar",color="Green")
    plt.ylabel('Revenue')
    plt.savefig(img, format = 'png')
    plt.close()
    img.seek(0)

    #plot_url = base64.b64encode(img.getvalue())
    #return render_template('testfig.html', plot_url = plot_url)
    return send_file(img, mimetype = 'image/png')


@app.route('/Top 5 Customer Revenues/')
def test1():
    fig,ax=plt.subplots(figsize=(6,6))
    ax=sns.set(style="darkgrid")
    df = pd.read_excel(r'C:\Users\chetali.a\Desktop\python\database\final_customer_sheet.xlsx')
    df['Date'] = pd.to_datetime(df['Date'])
    df['month'] = df['Date'].dt.month
    df['day'] = df['Date'].dt.day
    df['quarter'] = df['Date'].dt.quarter
    df = df.replace({'quarter': {1.0:'2019-Q4',2.0:'2019-Q1',3.0:'2019-Q2',4.0:'2019-Q3'}})
    df = df.replace({'Product ': {'MS Bar': 'MS BAR', 'Wire-7217':'WIRE-7217', 'MS Section':'MS SECTION', 'MS Flats': 'MS FLATS', 'MS Scrap': 'MS SCRAP','MS Billets': 'MS BILLETS'}})
    df1 = df.groupby(['quarter','Party'])['Amount ','Party'].sum()
    g = df1['Amount '].groupby(level=0, group_keys=False)
    res = g.apply(lambda x: x.sort_values(ascending=False).head(3))
    df1 = pd.DataFrame(res)
    df1 = df1.reset_index()
    sns.barplot(data= df1, x = 'quarter', y = 'Amount ', hue = 'Party')
    canvas=FigureCanvas(fig)
    img = io.BytesIO()
    fig.savefig(img)
    #plt.savefig(img, format = 'png')
    #plt.close()
    img.seek(0)
    return send_file(img,mimetype='image/png')

    #plot_url = base64.b64encode(img.getvalue())
    #return render_template('testfig.html', plot_url = plot_url)




if __name__ == '__main__':
    app.run()
